/* ==============================
   1) SCROLL PROGRESS INDICATOR
   ============================== */
.progress {
  position: fixed;
  inset: 0 0 auto;
  height: 6px;
  background: conic-gradient(#00f 0% 0%, transparent 0% 100%);
  z-index: 1000;
}

body {
  margin: 0;
  height: 300vh; /* to allow scrolling */
  background: #0a0a0a;
  color: white;
  font-family: system-ui, sans-serif;
}

@scroll-timeline progress-tl {
  source: auto;
  orientation: block;
}

.progress {
  animation: fill linear both;
  animation-timeline: progress-tl;
}

@keyframes fill {
  to { background: conic-gradient(#00f 0% 100%, transparent 100%); }
}

/* ==============================
   2) GLITCH TEXT EFFECT
   ============================== */
.glitch {
  font-size: clamp(2rem, 8vw, 6rem);
  position: relative;
  text-transform: uppercase;
  font-weight: 900;
  color: white;
}
.glitch::before,
.glitch::after {
  content: attr(data-text);
  position: absolute;
  inset: 0;
  mix-blend-mode: difference;
}
.glitch::before {
  color: cyan;
  animation: glitch 2s infinite;
}
.glitch::after {
  color: magenta;
  animation: glitch 2s infinite reverse;
}
@keyframes glitch {
  0%   { transform: translate(0); }
  20%  { transform: translate(-2px, 2px); }
  40%  { transform: translate(2px, -2px); }
  60%  { transform: translate(-1px, 1px); }
  80%  { transform: translate(1px, -1px); }
  100% { transform: translate(0); }
}

/* ==============================
   3) PURE CSS TABS WITH :HAS()
   ============================== */
.tabs {
  margin: 4rem auto;
  width: 80%;
  max-width: 600px;
  border-radius: 12px;
  overflow: hidden;
  border: 1px solid #444;
}
.tabs nav {
  display: flex;
  background: #111;
}
.tabs button {
  flex: 1;
  padding: 1rem;
  color: #bbb;
  background: none;
  border: none;
  cursor: pointer;
}
.tabs .content {
  display: grid;
  grid-template-columns: 100% 100% 100%;
  transition: transform 0.6s;
}
.tabs .panel {
  display: grid;
  place-items: center;
  height: 200px;
  font-size: 2rem;
}
.tabs:has(#t1:focus) .content { transform: translateX(0%); }
.tabs:has(#t2:focus) .content { transform: translateX(-100%); }
.tabs:has(#t3:focus) .content { transform: translateX(-200%); }

/* ==============================
   4) MORPHING BLOB
   ============================== */
@property --path {
  syntax: "<string>";
  inherits: false;
  initial-value: "M40,60 C20,20,80,20,60,80 Z";
}
.blob {
  height: 300px;
  margin: 5rem auto;
  background: linear-gradient(135deg, #ff0080, #7928ca, #2af598);
  clip-path: path(var(--path));
  animation: morph 6s infinite alternate ease-in-out;
}
@keyframes morph {
  0% { --path: "M40,60 C20,20,80,20,60,80 Z"; }
  50% { --path: "M50,50 C10,90,90,10,50,90 Z"; }
  100% { --path: "M60,40 C30,70,70,30,40,70 Z"; }
}

/* ==============================
   5) 3D SPINNING CUBE
   ============================== */
.cube {
  display: grid;
  place-items: center;
  perspective: 1000px;
  height: 400px;
}
.cube-inner {
  position: relative;
  transform-style: preserve-3d;
  animation: spin-cube 8s infinite linear;
  width: 200px;
  height: 200px;
}
.face {
  position: absolute;
  inset: 0;
  display: grid;
  place-items: center;
  background: rgba(255,255,255,0.1);
  border: 2px solid #00f;
  font-size: 2rem;
  font-weight: bold;
  color: white;
  backface-visibility: hidden;
}
.front  { transform: translateZ(100px); }
.back   { transform: rotateY(180deg) translateZ(100px); }
.left   { transform: rotateY(-90deg) translateZ(100px); }
.right  { transform: rotateY(90deg) translateZ(100px); }
.top    { transform: rotateX(90deg) translateZ(100px); }
.bottom { transform: rotateX(-90deg) translateZ(100px); }

@keyframes spin-cube {
  from { transform: rotateX(0) rotateY(0); }
  to   { transform: rotateX(360deg) rotateY(360deg); }
}
